syntax = "proto3";

package com.hedera.hapi.node.state.roster;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "basic_types.proto";

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.state.roster">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * A single roster in the network state.
 * <p>
 * The roster SHALL be a list of `RosterEntry` objects.
 */
message Roster {

  /**
   * List of roster entries, one per consensus node.
   * <p>
   * This list SHALL contain roster entries in natural order of ascending node ids.
   * This list SHALL NOT be empty.<br/>
   */
  repeated RosterEntry roster_entries = 1;
}

/**
 * A single roster entry in the network state.
 *
 * Each roster entry SHALL encapsulate the elements required
 * to manage node participation in the Threshold Signature Scheme (TSS).<br/>
 * All fields except tss_encryption_key are REQUIRED.
 */
message RosterEntry {

  /**
   * A consensus node identifier.
   * <p>
   * Node identifiers SHALL be unique _within_ a ledger,
   * and MUST NOT be repeated _between_ shards and realms.
   */
  uint64 node_id = 1;

  /**
   * A consensus weight.
   * <p>
   * Each node SHALL have a weight of zero or more in consensus calculations.<br/>
   * The sum of the weights of all nodes in the roster SHALL form the total weight of the system,
   * and each node's individual weight SHALL be proportional to that sum.<br/>
   */
  uint64 weight = 2;

  /**
   * An RSA public certificate used for signing gossip events.
   * <p>
   * This value SHALL be a certificate of a type permitted for gossip
   * signatures.<br/>
   * This value SHALL be the DER encoding of the certificate presented.<br/>
   * This field is REQUIRED and MUST NOT be empty.
   */
  bytes gossip_ca_certificate = 3;

  /**
   * An elliptic curve public encryption key.<br/>
   * This is currently an ALT_BN128 curve, but the elliptic curve
   * type may change in the future. For example,
   * if the Ethereum ecosystem creates precompiles for BLS12_381,
   * we may switch to that curve.
   * <p>
   * This value SHALL be specified according to EIP-196 and EIP-197 standards,
   * See <a href='https://eips.ethereum.org/EIPS/eip-196#encoding'>EIP-196</a> and
   * <a href='https://eips.ethereum.org/EIPS/eip-197#encoding'>EIP-197</a><br/>
   * This field is _initially_ OPTIONAL (i.e. it can be unset _when created_)
   * but once set, it is REQUIRED thereafter.
   */
  bytes tss_encryption_key = 4;

  /**
   * A list of external service endpoints for gossip.
   * <p>
   * External endpoints are usually used by nodes to connect to other nodes.
   * However, co-located nodes may sometimes choose to use internal endpoints
   * instead, so as to avoid exchanging traffic through external network interfaces,
   * or to comply with the network and firewall configuration that may otherwise
   * prohibit local nodes from communicating via external ip addresses.
   * <p>
   * These endpoints SHALL represent the published endpoints to which other
   * consensus nodes may _gossip_ transactions.<br/>
   * If the network configuration value `gossipFqdnRestricted` is set, then
   * all endpoints in this list SHALL supply only IP address.<br/>
   * If the network configuration value `gossipFqdnRestricted` is _not_ set,
   * then endpoints in this list MAY supply either IP address or FQDN, but
   * SHALL NOT supply both values for the same endpoint.<br/>
   * This list SHALL NOT be empty.<br/>
   */
  repeated proto.ServiceEndpoint gossip_endpoint = 5;

  /**
   * A list of internal service endpoints for gossip.
   * <p>
   * Nodes belonging to the same local network may choose to use these
   * internal endpoints to communicate with one another. This may be necessary
   * if the local network configuration prohibits hairpinning, in which case the nodes
   * are simply unable to connect to one another via their external endpoints.
   * <p>
   * These endpoints SHALL represent the published endpoints to which other
   * consensus nodes may _gossip_ transactions.<br/>
   * If the network configuration value `gossipFqdnRestricted` is set, then
   * all endpoints in this list SHALL supply only IP address.<br/>
   * If the network configuration value `gossipFqdnRestricted` is _not_ set,
   * then endpoints in this list MAY supply either IP address or FQDN, but
   * SHALL NOT supply both values for the same endpoint.<br/>
   * <p>
   * A node MAY duplicate its external endpoint as an internal endpoint here,
   * as long as this external endpoint is still present in the `gossip_endpoint`.
   * Note that such a duplicate entry is useless from functional perspective
   * and should be avoided if possible.<br/>
   * A node MAY have zero internal endpoints, in which case this field may be empty.
   */
  repeated proto.ServiceEndpoint internal_gossip_endpoint = 6;
}
